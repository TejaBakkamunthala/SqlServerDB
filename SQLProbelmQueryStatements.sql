CREATE DATABASE PROBLEMSTATEMENTS;

USE PROBLEMSTATEMENTS;
USE BRIDGELABZ;

/*Set up a database schema for tracking employee attendance with tables for employees and attendance records. Populate the tables with sample data. Write SQL queries to:

--Fetch attendance records for a specific employee.
--Fetch attendance records for a particular date.
--Fetch employees with perfect attendance (no absences).
--Fetch employees with a certain number of absences.
*/

CREATE TABLE EMPLOYE(EMPID INT PRIMARY KEY,EMPNAME VARCHAR(20),EMPSALARY MONEY);
--INSERT INTO EMPLOYE(EMPID,EMPNAME,EMPSALARY) VALUES\

ALTER TABLE EMPLOYE DROP COLUMN EMPSALARY  ;

ALTER TABLE EMPLOYE ADD  DEPARTMENT VARCHAR(20);

SELECT * FROM EMPLOYE;

INSERT INTO EMPLOYE(EMPID,EMPNAME,DEPARTMENT) VALUES
(1,'TEJA','IT'),
(2,'LOKESH','HR'),
(3,'RAMESH','NON-IT'),
(4,'SURESH','MANAGER'),
(5,'MAHESH','IT');




CREATE TABLE ATTENDANCERECORDS(ATTEDANCEID INT PRIMARY KEY,JOININGNDATE DATE,PRESENT VARCHAR(20),ABSENT VARCHAR(20),EMPID INT FOREIGN KEY REFERENCES EMPLOYE(EMPID));

ALTER TABLE ATTENDANCERECORDS ALTER COLUMN PRESENT INT;

ALTER TABLE ATTENDANCERECORDS ALTER COLUMN ABSENT INT;

SELECT * FROM ATTENDANCERECORDS;

INSERT INTO ATTENDANCERECORDS(ATTEDANCEID,JOININGNDATE,PRESENT,ABSENT,EMPID) VALUES
(1,'2024/01/01',2,2,1);

INSERT INTO ATTENDANCERECORDS(ATTEDANCEID,JOININGNDATE,PRESENT,ABSENT,EMPID) VALUES
(2,'2024/02/02',3,3,2),
(3,'2024/03/03',0,0,3),
(4,'2024/01/01',5,5,4),
(5,'2024/03/05',0,1,5);

--Fetch attendance records for a specific employee.
SELECT * FROM EMPLOYE,ATTENDANCERECORDS 
WHERE EMPLOYE.EMPID = ATTENDANCERECORDS.EMPID AND  EMPNAME='TEJA';


SELECT * FROM EMPLOYE,ATTENDANCERECORDS 
WHERE EMPLOYE.EMPID= ATTENDANCERECORDS.EMPID AND EMPLOYE.EMPNAME='LOKESH';



--Fetch attendance records for a particular date.

SELECT * FROM EMPLOYE,ATTENDANCERECORDS 
WHERE EMPLOYE.EMPID=ATTENDANCERECORDS.EMPID AND ATTENDANCERECORDS.JOININGNDATE='2024-01-01';

SELECT * FROM ATTENDANCERECORDS WHERE JOININGNDATE='2024-01-01';


--Fetch employees with perfect attendance (no absences).

SELECT *
FROM EMPLOYE,ATTENDANCERECORDS 
WHERE EMPLOYE.EMPID = ATTENDANCERECORDS.EMPID AND 
      ABSENT=0;

--Fetch employees with a certain number of absences.

SELECT *
FROM EMPLOYE,ATTENDANCERECORDS 
WHERE EMPLOYE.EMPID= ATTENDANCERECORDS.EMPID AND PRESENT>2;

SELECT  EMPNAME,ABSENT
FROM EMPLOYE,ATTENDANCERECORDS 
WHERE EMPLOYE.EMPID=ATTENDANCERECORDS.EMPID 
GROUP BY EMPNAME,ABSENT;

SELECT  EMPNAME,ABSENT,PRESENT
FROM EMPLOYE,ATTENDANCERECORDS 
WHERE EMPLOYE.EMPID=ATTENDANCERECORDS.EMPID 
GROUP BY EMPNAME,ABSENT,PRESENT;



/*Design a database schema for a student grade tracking system with tables for students, courses, and grades. Populate the tables with sample data. Write SQL queries to:

--Fetch all grades for a specific student.
--Fetch grades for a particular course.
--Fetch the highest grade achieved in each course.
--Fetch the average grade for all students.*/


CREATE TABLE STUDENT(STDID INT PRIMARY KEY,STDNAME VARCHAR(20),STDAGE INT);


SELECT * FROM STUDENT;

INSERT INTO STUDENT(STDID,STDNAME,STDAGE) VALUES
(1,'TEJA',22);

INSERT INTO STUDENT(STDID,STDNAME,STDAGE) VALUES
(2,'JAYANTH',23),
(3,'SOMESH',22),
(4,'LOKESH',23),
(5,'PAVAN',25),
(6,'CHAITANYA',26);





CREATE TABLE COURSES(CID INT PRIMARY KEY,CNAME VARCHAR(20),STDID INT FOREIGN KEY REFERENCES STUDENT(STDID));
INSERT INTO COURSES(CID,CNAME,STDID) VALUES
(1,'JAVA',1),
(2,'PYTHON',2),
(3,'DOTNET',3),
(4,'C#',4),
(5,'C++',5);

INSERT INTO COURSES(CID,CNAME,STDID) VALUES
(6,'JAVA',5),
(7,'PYTHON',5),
(8,'DOTNET',2),
(9,'C#',3),
(10,'C++',1);
SELECT * FROM COURSES;

CREATE TABLE GRADES(GID INT PRIMARY KEY,
GRADE INT,
STDID INT FOREIGN KEY REFERENCES STUDENT(STDID) ,
CID INT FOREIGN KEY REFERENCES COURSES(CID));

SELECT * FROM GRADES;

INSERT INTO GRADES(GID,GRADE,STDID,CID) VALUES
(1,80.0,1,1),
(2,70.00,1,1),
(3,60.00,2,2),
(4,80.00,2,2),
(5,50.00,3,3),
(6,90.00,3,3),
(7,60.00,4,4),
(8,80.00,5,5),
(9,100.00,6,6),
(10,100.00,6,6);

SELECT * FROM GRADES;

--Fetch all grades for a specific student.

SELECT  * FROM 
STUDENT,GRADES 
WHERE STUDENT.STDID =GRADES.STDID 
AND STUDENT.STDNAME='TEJA';

SELECT STDNAME,CID,GRADE
FROM STUDENT,GRADES
WHERE STUDENT.STDID = GRADES.STDID AND 
      STDNAME='TEJA'
GROUP BY STDNAME,CID,GRADE;

SELECT STDNAME,GRADE
FROM STUDENT,GRADES 
WHERE STUDENT.STDID = GRADES.STDID AND 
      STDNAME='TEJA'
GROUP BY STDNAME,GRADE;




--Fetch grades for a particular course.

SELECT CNAME,GRADE
FROM COURSES,GRADES
WHERE COURSES.CID= GRADES.CID AND
CNAME='JAVA'
GROUP BY GRADE,CNAME;

SELECT *
FROM COURSES,GRADES
WHERE COURSES.CID= GRADES.CID AND
CNAME='JAVA';






--Fetch the highest grade achieved in each course.

SELECT MAX(GRADE),CNAME
FROM COURSES,GRADES
WHERE COURSES.CID=GRADES.CID 
GROUP BY CNAME;



--Fetch the average grade for all students.*/

SELECT AVG(GRADE)
FROM GRADES;





/*Create a database schema for a library catalog system with tables for books, authors, and genres. Populate the tables with sample data. Write SQL queries to:

Fetch all books in the catalog.
Fetch books by a specific author.
Fetch books in a particular genre.
Fetch books published after a certain year. */


CREATE TABLE AUTHORS ( AUTHORID INT PRIMARY KEY, AUTHORNAME VARCHAR(30));

CREATE TABLE GENRES ( GENREID INT PRIMARY KEY,GENRENAME VARCHAR(30));

CREATE TABLE BOOKS ( BOOKID INT PRIMARY KEY, TITLE VARCHAR(20),PUBLISHEDYEAR INT,
AUTHORID INT FOREIGN KEY REFERENCES AUTHORS(AUTHORID),
GENREID INT FOREIGN KEY REFERENCES GENRES(GENREID));

INSERT INTO AUTHORS (AUTHORID,AUTHORNAME ) VALUES
(1, 'SS RAJAMOULI'),
(2, 'TRIVIKRAM'),
(3, 'PURI JAGANADH'),
(4, 'SUKUMAR');

SELECT * FROM AUTHORS;



INSERT INTO GENRES (GENREID, GENRENAME) VALUES
(1, 'COMEDY'),
(2, 'FUNNT'),
(3, 'THRILLER'),
(4, 'HORROR');

SELECT * FROM GENRES

INSERT INTO Books (BOOKID, TITLE,PUBLISHEDYEAR,AUTHORID,GENREID) VALUES
(1, 'BAHUBALI-1',2001, 1, 1),
(2, 'BAHUBALI-II',2010, 2, 2),
(3, 'GAMYAM', 2020,3, 3),
(4, 'RANAM',2023, 4, 4),
(5, 'SINGAM',2024, 1, 1),
(6, 'ANIMAL', 2019,2, 2),
(7, 'SALAAR',2018, 4, 4),
(8, 'EAGLE',2023, 1, 1);

SELECT * FROM BOOKS;


--Fetch all books in the catalog.
SELECT *FROM  BOOKS;

--Fetch books by a specific author.

SELECT * FROM BOOKS WHERE AUTHORID=1;

SELECT *FROM BOOKS,AUTHORS WHERE BOOKS.AUTHORID=AUTHORS.AUTHORID AND AUTHORNAME='SUKUMAR';

SELECT * FROM BOOKS,AUTHORS WHERE BOOKS.AUTHORID=AUTHORS.AUTHORID AND AUTHORNAME='SS RAJAMOULI';


--Fetch books in a particular genre.
SELECT * FROM BOOKS,GENRES WHERE BOOKS.GENREID=GENRES.GENREID  AND GENRENAME='HORROR';

SELECT * FROM BOOKS,GENRES WHERE BOOKS.GENREID=GENRES.GENREID AND GENRENAME='THRILLER';


--Fetch books published after a certain year. 
SELECT *FROM BOOKS WHERE PUBLISHEDYEAR>2010;

--JOINS
SELECT * FROM BOOKS INNER JOIN AUTHORS  ON BOOKS.AUTHORID=AUTHORS.AUTHORID; 

SELECT * FROM BOOKS RIGHT OUTER JOIN AUTHORS  ON BOOKS.AUTHORID=AUTHORS.AUTHORID; 

SELECT * FROM BOOKS LEFT  OUTER JOIN AUTHORS ON BOOKS.AUTHORID=AUTHORS.AUTHORID;

SELECT * FROM BOOKS FULL OUTER JOIN GENRES ON BOOKS.GENREID=GENRES.GENREID;

SELECT B1.BOOKID,B1.TITLE,B1.PUBLISHEDYEAR 
FROM BOOKS B1 ,BOOKS B2 
WHERE B1.BOOKID=B2.BOOKID AND B2.TITLE='SINGAM';

/*Set up a database schema for a customer order management system with tables for customers, orders, and order items. Populate the tables with sample data. Write SQL queries to:

Fetch all orders placed by a specific customer.
Fetch orders containing a particular product.
Fetch orders placed within a certain date range.
Fetch orders with a total value exceeding a specified amount.
*/

CREATE TABLE CUSTOMERS (CID INT PRIMARY KEY,CNAME VARCHAR(20),CEMAILID VARCHAR(20));

ALTER TABLE CUSTOMERS ALTER COLUMN CEMAILID VARCHAR(50);
INSERT INTO CUSTOMERS(CID,CNAME,CEMAILID) VALUES
(1,'RAMCHARAN','RAMCHARAN@GMAIL.COM'),
(2,'ALLUARJUN','ALLUARJUN@GMAIL.COM'),
(3,'CHIRANJEEV','CHIRANJEEVI@GMAIL.COM'),
(4,'ALLUSIRISH','ALLUSIRISJH@GMAIL.COM'),
(5,'PRABHAS','PRABHAS@GMAIL.COM');

SELECT * FROM CUSTOMERS;

CREATE TABLE ORDERS(OREDERID INT PRIMARY KEY,
ORDERDATE DATE,
TOTALAMOUNT  INT, 
CID INT FOREIGN KEY REFERENCES CUSTOMERS(CID));

 EXEC SP_RENAME 'ORDERS.OREDERID', 'ORDERID' 

SELECT * FROM ORDERS;

INSERT INTO ORDERS(ORDERID,ORDERDATE,TOTALAMOUNT,CID) VALUES
(1,'2024-01-01',1000,1),
(2,'2023-10-10',1000,2),
(3,'2023-12-15',2000,3),
(4,'2023-10-02',1000,4),
(5,'2023-12-05',4000,5);

SELECT *FROM ORDERS;


CREATE TABLE ORDERITEM(ORDERITEMID INT PRIMARY KEY,
ITEM VARCHAR(40),
ITEMPRICE INT,
ORDERID INT FOREIGN KEY REFERENCES ORDERS(ORDERID),
CID INT FOREIGN KEY REFERENCES CUSTOMERS(CID));

INSERT INTO ORDERITEM
(ORDERITEMID,ITEM,ITEMPRICE,ORDERID,CID) VALUES
(1,'RICE',500,1,1),
(2,'BOOK',30,1,1),
(3,'BOTTLE',50,2,2),
(4,'LAPTOP',30000,2,2),
(5,'BAG',500,3,3),
(6,'PHONE',3000,3,3),
(7,'CHARGER',50,4,4),
(8,'BOOK',30,4,4),
(9,'SHIRT',5000,5,5),
(10,'PANT',1000,5,5);

SELECT * FROM  ORDERITEM;


--Fetch all orders placed by a specific customer.
SELECT *
FROM CUSTOMERS,ORDERS
WHERE CUSTOMERS.CID=ORDERS.CID AND CNAME='ALLUARJUN';

SELECT CNAME,CEMAILID,ORDERID
FROM CUSTOMERS,ORDERS
WHERE CUSTOMERS.CID=ORDERS.CID AND CNAME='RAMCHARAN'
GROUP BY CNAME,CEMAILID,ORDERID;

--INNER JOIN
SELECT *
FROM CUSTOMERS INNER JOIN ORDERS 
ON CUSTOMERS.CID= ORDERS.CID AND CNAME='RAMCHARAN';

SELECT CNAME,CEMAILID 
FROM CUSTOMERS INNER JOIN ORDERS 
ON CUSTOMERS.CID= ORDERS.CID AND CNAME='RAMCHARAN'
GROUP BY CNAME,CEMAILID;

--FULL OUTER JOIN
SELECT * FROM CUSTOMERS FULL OUTER JOIN ORDERS
ON CUSTOMERS.CID = ORDERS.CID  AND CNAME='ALLUSIRISH';

--LEFT OUTER JOIN
SELECT * FROM CUSTOMERS LEFT OUTER JOIN ORDERS
ON CUSTOMERS.CID = ORDERS.CID  AND CNAME='ALLUSIRISH';

--RIGHT OUTER JOIN
SELECT * FROM CUSTOMERS RIGHT OUTER JOIN ORDERS
ON CUSTOMERS.CID = ORDERS.CID  AND CNAME='ALLUSIRISH';





--Fetch orders containing a particular product.
SELECT * 
FROM ORDERS,ORDERITEM
WHERE ORDERS.ORDERID=ORDERITEM.ORDERID AND ITEM='RICE';

SELECT ITEM,TOTALAMOUNT
FROM ORDERS,ORDERITEM
WHERE ORDERS.ORDERID=ORDERITEM.ORDERID AND ITEM='BOTTLE'
GROUP BY ITEM,TOTALAMOUNT;

--INNER JOIN
SELECT *
FROM ORDERS INNER JOIN ORDERITEM
ON ORDERS.ORDERID=ORDERITEM.ORDERID AND ITEM='PHONE';

SELECT ORDERDATE,ITEM,TOTALAMOUNT FROM 
ORDERS INNER JOIN ORDERITEM
ON ORDERS.ORDERID=ORDERITEM.ORDERID AND ITEM='CHARGER';

/*SELECT * 
FROM CUSTOMERS INNER JOIN ORDERS INNER JOIN ORDERITEM
ON CUTSOMERS.ORDERID= ORDERS.ORDERID AND ORDERS.ORDERID=ORDERITEM.ORDERID AND ITEM='BOOK';

SELECT * 
FROM CUSTOMERS
INNER JOIN ORDERS ON CUSTOMERS.ORDERID = ORDERS.ORDERID 
INNER JOIN ORDERITEM ON ORDERS.ORDERID = ORDERITEM.ORDERID 
AND ITEM = 'BOOK'; */




--LEFT OUTER JOIN
SELECT * 
FROM ORDERS LEFT OUTER JOIN ORDERITEM
ON ORDERS.ORDERID= ORDERITEM.ORDERID AND ITEM='BOOK';

--RIGHT OUTER JOIN
SELECT *
FROM ORDERS RIGHT OUTER JOIN ORDERITEM
ON ORDERS.ORDERID = ORDERITEM.ORDERID AND ITEM='PHONE';

--FULL OUTER JOIN
SELECT * 
FROM ORDERS FULL OUTER JOIN ORDERITEM
ON ORDERS.ORDERID= ORDERITEM.ORDERID AND ITEM='BOOK';


--Fetch orders placed within a certain date range.

SELECT * FROM ORDERS WHERE ORDERDATE>='2023-01-01' AND ORDERDATE<='2023-12-12';

SELECT * FROM ORDERS WHERE ORDERDATE BETWEEN '2023-01-01' AND '2023-12-12';

--Fetch orders with a total value exceeding a specified amount.

SELECT * FROM ORDERS WHERE TOTALAMOUNT>1000;








/*4)Design a database schema for a product inventory system with tables for products, categories, and suppliers. Populate the tables with sample data. Write SQL queries to:

Fetch all product records.
Fetch products belonging to a specific category.
Fetch products with a price greater than a specified value.
Fetch products with low stock quantities (e.g., less than 10 units).*/


CREATE TABLE CATEGORY(CATEGORYID INT PRIMARY KEY,CATEGORYNAME VARCHAR(30));
INSERT INTO CATEGORY(CATEGORYID,CATEGORYNAME) VALUES
(1,'ELECTRONICS'),
(2,'VEGETABLES'),
(3,'NON-ELECTRONICS'),
(4,'TEXTILES');

SELECT * FROM CATEGORY




CREATE TABLE SUPPLIERS (SUPPLIERID INT PRIMARY KEY,
SUPPLIERNAME VARCHAR(30),
CATEGORYID INT FOREIGN KEY REFERENCES CATEGORY(CATEGORYID));

SELECT * FROM SUPPLIERS
INSERT INTO SUPPLIERS(SUPPLIERID,SUPPLIERNAME,CATEGORYID)VALUES
(1,'ELECTRONIC SUPPLIERS',1),
(2,'VEGETABLES SUPLIERS',2),
(3,'NON-ELECTRONICS',3),
(4,'TEXTILE SUPPLIERS',4);



CREATE TABLE PRODUCTS(PRODUCTID INT PRIMARY KEY,
PRODUCTNAME VARCHAR(30),
UNITPRICE INT,
QUANTITYSTOCK INT,
CATEGORYID INT FOREIGN KEY REFERENCES CATEGORY(CATEGORYID),
SUPPLIERID INT FOREIGN KEY REFERENCES SUPPLIERS(SUPPLIERID));


INSERT INTO PRODUCTS(PRODUCTID, PRODUCTNAME,UNITPRICE,QUANTITYSTOCK,CATEGORYID,SUPPLIERID) VALUES
(1,'REDMI',1000,11,1,1),
(2,'OOPO',2000,5,1,1),
(3,'CARROT',20,13,2,2),
(4,'BANANA',15,5,2,2),
(5,'BOOK',6,6,3,3),
(6,'BAG',500,8,3,3),
(7,'SHIRT',400,20,4,4),
(8,'PANT',50,8,4,4);

SELECT * FROM PRODUCTS;


--Fetch all product records.
SELECT * FROM PRODUCTS;

--Fetch products belonging to a specific category.
SELECT* 
FROM PRODUCTS,CATEGORY 
WHERE PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND CATEGORYNAME='ELECTRONICS';

--INNERJOIN
SELECT * FROM 
PRODUCTS INNER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND CATEGORYNAME='VEGETABLES';

--RIGHT OUTER JOIN
SELECT *
FROM PRODUCTS RIGHT OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID and CATEGORYNAME='ELECTRONICS';

--LEFT OUTER JOIN
SELECT * 
FROM PRODUCTS LEFT OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND CATEGORYNAME='TEXTILES';


--FULL OUTER JOIN
SELECT * 
FROM PRODUCTS FULL OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND CATEGORYNAME='NON-ELECTRONICS';


--Fetch products with a price greater than a specified value.

SELECT * 
FROM PRODUCTS,CATEGORY
WHERE PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND UNITPRICE>=500;

--INNER JOIN
SELECT *
FROM PRODUCTS INNER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND  UNITPRICE<500;

--RIGHT OUTER JOIN
SELECT *
FROM PRODUCTS RIGHT OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND  UNITPRICE>=500;

--LEFT OUTER JOIN
SELECT *
FROM PRODUCTS LEFT OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND  UNITPRICE>=500;

--FULL OUTER JOIN
SELECT *
FROM PRODUCTS FULL OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND  UNITPRICE>=500;



--Fetch products with low stock quantities (e.g., less than 10 units).*/

SELECT * 
FROM PRODUCTS, CATEGORY
WHERE PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND QUANTITYSTOCK<=10;

--INNER JOIN
SELECT *
FROM PRODUCTS INNER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND QUANTITYSTOCK<10;

--RIGHT OUTER JOIN
SELECT *
FROM PRODUCTS RIGHT OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND QUANTITYSTOCK<10;

--LEFT OUTER JOIN
SELECT *
FROM PRODUCTS LEFT OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND QUANTITYSTOCK<10;

--FULL OUTER JOIN
SELECT *
FROM PRODUCTS FULL OUTER JOIN CATEGORY
ON PRODUCTS.CATEGORYID=CATEGORY.CATEGORYID AND QUANTITYSTOCK<10;

--SELF JOIN
SELECT * 
FROM PRODUCTS P1, PRODUCTS P2
WHERE P1.PRODUCTID=P2.PRODUCTID AND P2.PRODUCTNAME='BOOK';

SELECT P1.PRODUCTID,P1.PRODUCTNAME,P1.UNITPRICE,P1.QUANTITYSTOCK,P1.CATEGORYID
FROM PRODUCTS P1, PRODUCTS P2
WHERE P1.PRODUCTID=P2.PRODUCTID AND  P2.QUANTITYSTOCK=8;




















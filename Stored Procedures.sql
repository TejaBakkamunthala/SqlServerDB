USE BRIDGELABZ

SELECT * FROM EMPLOYE;
SELECT * FROM DEPARTMENTT;

--HOW TO CREATE STORED PROCEDURE
CREATE PROCEDURE DEPTLIST
AS
BEGIN
SELECT * FROM EMPLOYE WHERE DEPTID=1;
END

-- CALL STORED PROCEDURE
DEPTLIST
EXEC DEPTLIST;
EXECUTE DEPTLIST;

--DROP STORED PROCEDURE
DROP PROCEDURE DEPTLIST;


--HOW TO ALTER/MODIFY STORED PROCEDURE
CREATE OR ALTER PROCEDURE DEPTLIST
AS 
BEGIN
SELECT * FROM EMPLOYE WHERE DEPTID=1;
SELECT *  FROM EMPLOYE WHERE DEPTID=3;
SELECT * FROM EMPLOYE WHERE EMPSALARY >5000;
END

EXECUTE DEPTLIST

DROP PROCEDURE DEPTLIST


CREATE OR ALTER PROCEDURE DEPTLIST
AS
BEGIN
SELECT * FROM EMPLOYE WHERE DEPTID=1;
SELECT * FROM EMPLOYE WHERE EMPNAME='TEJA';
END

EXECUTE DEPTLIST

DROP PROCEDURE DEPTLIST

CREATE OR ALTER PROCEDURE DEPTLIST
AS
BEGIN
SELECT * FROM EMPLOYE WHERE DEPTID=1 AND EMPNAME='TEJA';
END

EXECUTE DEPTLIST

DROP PROCEDURE DEPTLIST


--INPUT PARAMETER AND OUTPUT PARAMETER
CREATE OR ALTER PROCEDURE DEPTLSIT
@dept_id INT,
@emp_name VARCHAR(30)
AS
BEGIN
SELECT * FROM EMPLOYE WHERE DEPTID=@dept_id;
SELECT * FROM EMPLOYE WHERE EMPNAME=@emp_name;
END

--EXECUTE DEPTLSIT 1,'TEJA';
--EXECUTE DEPTLSIT @dept_id=1,@emp_name='TEJA';
EXECUTE DEPTLSIT @emp_name='TEJA',@dept_id=1;


drop  PROCEDURE DEPTLSIT;


CREATE OR ALTER PROCEDURE DEPTLIST
@dept_id INT=1,
@emp_name VARCHAR(30)='SUNIL'
AS
BEGIN
SELECT * FROM EMPLOYE WHERE DEPTID=@dept_id;
SELECT * FROM EMPLOYE WHERE EMPNAME=@emp_name;
END

EXECUTE  DEPTLIST

DROP PROCEDURE DEPTLIST


CREATE OR ALTER PROCEDURE DEPTLIST
@dept_id INT=1,
@emp_name VARCHAR(30)='SUNIL'
AS
BEGIN
SELECT * FROM EMPLOYE WHERE DEPTID=@dept_id;
SELECT * FROM EMPLOYE WHERE EMPNAME=@emp_name;
END

EXECUTE  DEPTLIST 3,'JAYANTH';






--OUTPUT PARAMETER

CREATE OR ALTER  PROCEDURE ADDDIGITS
@Num1 INT,
@Num2 INT,
@Sum INT OUTPUT
AS 
BEGIN
SET @Sum=@Num1+@Num2;
END

-------
DECLARE @Sum INT
EXECUTE ADDDIGITS 10,20,@Sum OUTPUT
SELECT @Sum;



SELECT * FROM EMPLOYE;

--UPADTE
CREATE OR ALTER PROCEDURE UPDATEDATA
AS 
BEGIN 
UPDATE EMPLOYE 
SET EMPNAME='SURYA TEJA' WHERE EMPID=7;
END

EXECUTE UPDATEDATA;

--UPDATE

CREATE OR ALTER PROCEDURE UPDATENAMEE
@emp_id INT ,
@emp_name VARCHAR(20)
AS
BEGIN
UPDATE EMPLOYE SET EMPNAME=@emp_name WHERE EMPID=@emp_id

END


EXECUTE UPDATENAMEE 8,'SUNNY';


--INSERT 

CREATE OR ALTER PROCEDURE INSERTDATA
@emp_id INT,
@emp_name VARCHAR(30),
@emp_salary INT,
@dept_id INT
AS 
BEGIN
INSERT INTO EMPLOYE(EMPID,EMPNAME,EMPSALARY,DEPTID)
VALUES(@emp_id,@emp_name,@emp_salary,@dept_id);
END;

EXECUTE INSERTDATA 14,'RAM CHARN',3500,6;




--DELETE

CREATE OR ALTER PROCEDURE DELETEDATA
@emp_id INT
AS
BEGIN
DELETE FROM EMPLOYE WHERE EMPID=@emp_id;
END

EXECUTE DELETEDATA 14;



--->MINSALARY

CREATE OR ALTER PROCEDURE SALARYPROCEDURE
@min_emp_salary INT
AS
BEGIN
SELECT * FROM EMPLOYE WHERE EMPSALARY>=@min_emp_salary
ORDER BY EMPSALARY
END

EXECUTE  SALARYPROCEDURE 3000


--MIN SALARY AND MIN SALARY
CREATE OR ALTER PROCEDURE MINMAXSALARY
@min_salary INT,
@max_salary INT
AS
BEGIN
SELECT * FROM  EMPLOYE 
WHERE EMPSALARY>=@min_salary AND EMPSALARY<=@max_salary
ORDER BY EMPSALARY;
END

EXECUTE MINMAXSALARY @min_salary=2000 , @max_salary=4000		


--MINMAXNAME
CREATE OR ALTER PROCEDURE MINMAXNAMEPROCEDURE(
@min_salary INT ,
@max_salary INT,
@name VARCHAR(20))
AS
BEGIN
SELECT * FROM EMPLOYE WHERE EMPSALARY>=@min_salary AND
                            EMPSALARY<=@max_salary AND
							EMPNAME LIKE '%'+@name+ '%';

							END;


EXECUTE  MINMAXNAMEPROCEDURE @min_salary=1000 , 
                             @max_salary=4000,
							 @name='TEJA';


CREATE OR ALTER PROCEDURE MINMAXPROCEDURE1(
@min_salary INT,
@max_salary INT,
@name VARCHAR(30)
)
AS
BEGIN
SELECT * FROM EMPLOYE WHERE
                      EMPSALARY BETWEEN 
					  @min_salary AND @max_salary AND 
					  @name LIKE '%'+'%';

END

EXECUTE MINMAXNAMEPROCEDURE 1000,4000,SU;



--IF ELSE

CREATE OR ALTER PROCEDURE  CheckEmployeSalary
@emp_id INT
AS
DECLARE @salary INT
BEGIN
SELECT @salary=EMPSALARY FROM  EMPLOYE WHERE EMPID=@emp_id; 

IF @salary>3000 
BEGIN
   PRINT @salary;
   PRINT 'Employe is earning higher salary ';
END

ELSE
BEGIN
PRINT @salary
PRINT 'Employe is earning lesser salary ';
END
END


EXECUTE  CheckEmployeSalary 1;



--
CREATE OR ALTER PROCEDURE COMPARE
AS
BEGIN
DECLARE @a INT=20,
        @b INT=10;

IF(@a>@b)
BEGIN
PRINT 'a is greater than ';
END
ELSE
BEGIN
PRINT 'B is greater than a';
END
END

EXECUTE COMPARE;



--WHILE

CREATE OR ALTER PROCEDURE PRINTING
AS
DECLARE @STARTINGVALUE INT=1;

WHILE @STARTINGVALUE<=10
BEGIN
PRINT @STARTINGVALUE;
SET @STARTINGVALUE=@STARTINGVALUE+1;

END	


EXECUTE PRINTING



--BREAK

CREATE OR ALTER PROCEDURE BREAKPRINTING
AS
DECLARE @STARTINGVALUE INT=1;

WHILE @STARTINGVALUE<10

BEGIN

PRINT @STARTINGVALUE
SET @STARTINGVALUE=@STARTINGVALUE+2;

IF(@STARTINGVALUE=5)
BREAK;

END

EXECUTE BREAKPRINTING;



--CONTINUE
CREATE OR ALTER PROCEDURE CONTINUEPRINTING
AS
DECLARE @STARTINGVALUE INT=0;

WHILE @STARTINGVALUE<10
BEGIN
SET @STARTINGVALUE=@STARTINGVALUE+1;

IF(@STARTINGVALUE=5)
CONTINUE;
PRINT @STARTINGVALUE


END

EXECUTE CONTINUEPRINTING;



--TRY CATCH

CREATE PROC DIVIDREPROCEDUE(
    @a decimal,
    @b decimal,
    @c decimal output
) AS
BEGIN
    BEGIN TRY
        SET @c = @a / @b;
    END TRY
    BEGIN CATCH
        SELECT  
            ERROR_NUMBER() AS ErrorNumber  
            ,ERROR_SEVERITY() AS ErrorSeverity  
            ,ERROR_STATE() AS ErrorState  
            ,ERROR_PROCEDURE() AS ErrorProcedure  
            ,ERROR_LINE() AS ErrorLine  
            ,ERROR_MESSAGE() AS ErrorMessage;  
    END CATCH
END;
GO


DECLARE @r decimal
EXECUTE DIVIDREPROCEDUE 10,5, @r output;

PRINT @r


DECLARE @r decimal
EXECUTE DIVIDREPROCEDUE 10,0, @r output;
PRINT @r







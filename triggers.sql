USE ADVANCEDSQL

CREATE TABLE STUDENT (
STDID INT PRIMARY KEY,
STDNAME VARCHAR(30),
STDGENDER VARCHAR(30),
CLASS INT,
FEES INT);

INSERT INTO STUDENT(STDID,STDNAME,STDGENDER,CLASS,FEES) VALUES
(1,'TEJA','MALE',8,10000),
(2,'SUNIL','MALE',9,2000),
(3,'PAVAN','MALE',10,3000),
(4,'KAVITHA','FEMALE',8,4000),
(5,'RAMYA','FEMALE',9,5000),
(6,'JAYANTH','MALE',10,6000);

--INSERT
CREATE  OR ALTER TRIGGER TR_STUDENT_FOR_INSERT
ON STUDENT 
AFTER INSERT
AS
BEGIN
SELECT * FROM INSERTED
END

INSERT INTO STUDENT(STDID,STDNAME,STDGENDER,CLASS,FEES) VALUES
(7,'RAJASHEKHAR','MALE',9,10000);

INSERT INTO STUDENT(STDID,STDNAME,STDGENDER,CLASS,FEES) VALUES
(8,'CHAITANYA','MALE',9,10000);


--DELETE
CREATE  OR ALTER TRIGGER TR_STUDENT_FOR_DELETE
ON STUDENT 
AFTER DELETE
AS
BEGIN
SELECT * FROM DELETED
END


DELETE FROM STUDENT WHERE STDID=8;
DELETE FROM STUDENT WHERE STDID=7;



SELECT * FROM  STUDENT;


--UPDATE

CREATE  OR ALTER TRIGGER TR_STUDENT_FOR_UPDATE
ON STUDENT 
AFTER UPDATE
AS
BEGIN
SELECT * FROM INSERTED
SELECT * FROM DELETED
END


UPDATE STUDENT SET STDNAME='SUNNY' WHERE STDID=2;

SELECT * FROM STUDENT;

SP_HELPTEXT TR_STUDENT_FOR_UPDATE;

--AUDIT TABLE
CREATE  TABLE STDUENT_AUDIT
(AUDIT_ID INT PRIMARY KEY IDENTITY,AUDIT_INFO VARCHAR (MAX));

SELECT * FROM STDUENT_AUDIT;

CREATE  OR ALTER TRIGGER TR_STUDENT_AUDIT_FOR_INSERT
ON STUDENT 
AFTER INSERT
AS
BEGIN
  DECLARE @ID INT
  SELECT @ID=STDID FROM INSERTED

  INSERT INTO STDUENT_AUDIT
   VALUES('STDUENT WITH ID '+CAST(@ID AS VARCHAR(50))+'  IS ADDED AT '+CAST(GETDATE() AS VARCHAR(50)));

END

INSERT INTO STUDENT(STDID,STDNAME,STDGENDER,CLASS,FEES) VALUES
(10,'JAYA','MALE',9,10000);

SELECT * FROM STDUENT_AUDIT;


--DELETE
CREATE  OR ALTER TRIGGER TR_STUDENT_AUDIT_FOR_DELETE
ON STUDENT 
AFTER DELETE
AS
BEGIN
  DECLARE @ID INT
  SELECT @ID=STDID FROM DELETED

  INSERT INTO STDUENT_AUDIT
   VALUES(' EXISTING STDUENT WITH ID '+CAST(@ID AS VARCHAR(50))+'  IS DELETED AT '+CAST(GETDATE() AS VARCHAR(50)));

END

DELETE FROM STUDENT WHERE STDID=7;

SELECT * FROM STDUENT_AUDIT;

SELECT * FROM STUDENT;

--STUDENT AUDITT TABLE INSERTED

CREATE TABLE STUDENT_AUDITT (
ID INT PRIMARY KEY IDENTITY,
STDID INT ,
STDNAME VARCHAR(30),
CLASS INT,
UPDATEDAT DATETIME ,
OPERATION VARCHAR(10),
CHECK(OPERATION = 'INSERTED' or OPERATION='DELETED' or OPERATION='UPDATED')
);

SELECT * FROM STUDENT_AUDITT;


--INSERTED 
CREATE OR ALTER TRIGGER TR_STUDENT_AUDITT_FOR_INSERT
ON STUDENT
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO STUDENT_AUDITT(
        STDID, 
        STDNAME,
        CLASS,
        UPDATEDAT, 
        OPERATION
    )
    SELECT
        i.STDID,
        STDNAME,
        CLASS,
        GETDATE(),
        'INSERTED'
    FROM
        inserted i
 END

 INSERT INTO STUDENT(STDID,STDNAME,STDGENDER,CLASS,FEES) VALUES
(8,'RAJASHEKHAR','MALE',9,10000);

SELECT * FROM STDUENT_AUDIT;
SELECT * FROM STUDENT_AUDITT


--DELETED
 CREATE OR ALTER TRIGGER TR_STUDENT_AUDITT_FOR_DELETE
ON STUDENT
AFTER DELETE
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO STUDENT_AUDITT(
        STDID, 
        STDNAME,
        CLASS,
        UPDATEDAT, 
        OPERATION
    )
    SELECT
        i.STDID,
        STDNAME,
        CLASS,
        GETDATE(),
        'DELETED'
    FROM
        DELETED i
 END


 SELECT * FROM STUDENT;



 DELETE FROM STUDENT WHERE STDID=8;

SELECT * FROM STDUENT_AUDIT;
SELECT * FROM STUDENT_AUDITT


--UPDTAE

CREATE OR ALTER TRIGGER TR_STUDENT_AUDITT_FOR_UPDATE
ON STUDENT
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO STUDENT_AUDITT(
        STDID, 
        STDNAME,
        CLASS,
        UPDATEDAT, 
        OPERATION
    )
    SELECT
        i.STDID,
        STDNAME,
        CLASS,
        GETDATE(),
        'UPDATED'
    FROM
        INSERTED i
    JOIN
        DELETED d ON i.STDID = d.STDID
    /*WHERE
        i.STDNAME != d.STDNAME OR
        i.CLASS != d.CLASS;*/
END;


 SELECT * FROM STUDENT;



UPDATE STUDENT  SET STDNAME='TEJ' WHERE STDID=1;

SELECT * FROM STDUENT_AUDIT;
SELECT * FROM STUDENT_AUDITT














































--DML INSTEAD OF TRIGGERS



CREATE TABLE CUSTOMER(ID INT PRIMARY KEY,
NAME VARCHAR(30),
GENDER VARCHAR(30),
LOCATION VARCHAR(30),
PINCCODE INT);



INSERT INTO CUSTOMER(ID,NAME,GENDER,LOCATION,PINCCODE) VALUES
(1,'TEJA','MALE','BTM',12345),
(2,'SURYA','MALE','HSR',34567),
(3,'THARUN','MALE','ELECTRONC CITY',23455),
(4,'MAHESH','MALE','MADIWALA',23456);



--DML INSTEAD OF INSERT
CREATE TRIGGER TRIGGER_CUSTOMER_INSERTOF_INSERT
ON CUSTOMER
INSTEAD OF INSERT
AS
BEGIN
PRINT 'YOU ARE NOT ALLOWED TO INSETT DATA IN THIS TABLE';
END

INSERT INTO CUSTOMER(ID,NAME,GENDER,LOCATION,PINCCODE) VALUES
(5,'SARA','FEMALE','BTM',12345);

SELECT * FROM CUSTOMER;


DROP TRIGGER TRIGGER_CUSTOMER_INSERTOF_INSERT 



--UPDATE
CREATE TRIGGER TRIGGER_CUSTOMER_INSTEADOF_UPDATE
ON CUSTOMER
INSTEAD OF UPDATE
AS
BEGIN
PRINT 'YOU ARE NOT ALLOWED TO UPDATE DATA IN THIS TABLE';
END

UPDATE CUSTOMER SET NAME='TEJ' WHERE ID=1;

DROP TRIGGER TRIGGER_CUSTOMER_INSTEADOF_UPDATE;

SELECT * FROM CUSTOMER;

--DELETE
CREATE TRIGGER TRIGGER_CUSTOMER_INSTEADOF_DELETE
ON CUSTOMER
INSTEAD OF DELETE
AS
BEGIN
PRINT 'YOU ARE NOT ALLOWED TO DELETE DATA IN THIS TABLE';
END

DELETE FROM CUSTOMER WHERE ID=4;

SELECT * FROM CUSTOMER;

DROP TRIGGER TRIGGER_CUSTOMER_INSTEADOF_DELETE;

--CUSTOMER_AUDIT_TABLE
CREATE TABLE CUSTOMER_AUDIT(AUDIT_ID INT PRIMARY KEY IDENTITY, 
AUDIT_INFORMATION VARCHAR(MAX));

SELECT *FROM CUSTOMER_AUDIT;

CREATE OR ALTER TRIGGER TRIGGER_CUSTOMER_INSTEADOF_INSERT_AUDIT
ON CUSTOMER
INSTEAD OF INSERT
AS
BEGIN

 INSERT INTO CUSTOMER_AUDIT VALUES('SOMEONE TRIES TO INSERT INTO  CUSTOMER TABLE AT : '+CAST(GETDATE() AS VARCHAR(50)))

END

INSERT INTO CUSTOMER(ID,NAME,GENDER,LOCATION,PINCCODE) VALUES
(5,'SARA','FEMALE','BTM',12345);

SELECT * FROM CUSTOMER;

SELECT * FROM CUSTOMER_AUDIT;
--UPADTE
CREATE OR ALTER TRIGGER TRIGGER_CUSTOMER_INSTEADOF_UPDATE_AUDIT
ON CUSTOMER
INSTEAD OF UPDATE
AS
BEGIN

 INSERT INTO CUSTOMER_AUDIT VALUES('SOMEONE TRIES TO UPDATE INTO  CUSTOMER TABLE AT : '+CAST(GETDATE() AS VARCHAR(50)))

END

UPDATE CUSTOMER SET NAME='TEJ' WHERE ID=1; 
SELECT * FROM CUSTOMER;
SELECT * FROM CUSTOMER_AUDIT;


--DELETE

CREATE OR ALTER TRIGGER TRIGGER_CUSTOMER_INSTEADOF_DELETE_AUDIT
ON CUSTOMER
INSTEAD OF DELETE
AS
BEGIN

 INSERT INTO CUSTOMER_AUDIT VALUES('SOMEONE TRIES TO DELETE INTO  CUSTOMER TABLE AT : '+CAST(GETDATE() AS VARCHAR(50)))

END

DELETE FROM CUSTOMER WHERE ID=1;

SELECT * FROM CUSTOMER;

SELECT * FROM CUSTOMER_AUDIT;


--USING INSTEAD OF TRIGGERS WITH VIEWS

CREATE  OR ALTER VIEW EMPLOYEE_VIEW
AS
SELECT EMPID,EMPNAME,EMPSALARY,DEPTNAME,DEPTCITY FROM EMPLOYEES INNER JOIN
DEPARTMENTS ON EMPLOYEES.DEPTID=DEPARTMENTS.DEPTID

SELECT * FROM EMPLOYEE_VIEW;

DELETE FROM EMPLOYEE_VIEW WHERE DEPTID=5;

CREATE TRIGGER TRIGGER_INSTEADF_EMPLOYEES
ON EMPLOYEE_VIEW
INSTEAD OF DELETE
AS
BEGIN 
DELETE FROM EMPLOYEES WHERE DEPTID IN(SELECT DEPTID FROM DELETED)
DELETE FROM DEPARTMENTS WHERE DEPTID IN(SELECT DEPTID FROM DELETED)
END

SELECT * FROM EMPLOYEES;

SELECT * FROM DEPARTMENTS;


--DDL TRIGGERS





